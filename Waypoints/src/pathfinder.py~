#!/usr/bin/env python

import rospy
from geometry_msgs.msg import PoseStamped
from geometry_msgs.msg import Pose
from nav_msgs.msg import Path
from nav_msgs.srv   import GetPlan
 
from tf.transformations import euler_from_quaternion
from tf.transformations import quaternion_from_euler

import pylab as pl
import numpy as np

global tolerance
global published

def computePathLength(startPose, goalPose):

    global tolerance

    tolerance = 0.1

    #roll = 0
    #pitch = 0
    #yaw = 1.57	
    #quaternion = quaternion_from_euler(roll, pitch, yaw)

    #startPose = Pose()
    #startPose.position.x = 10.0
    #startPose.position.y = 8.0
    #startPose.position.z = 0.000
    #startPose.orientation.x = quaternion[0]
    #startPose.orientation.y = quaternion[1]
    #startPose.orientation.z = quaternion[2]
    #startPose.orientation.w = quaternion[3]

    #goalPose = Pose()
    #goalPose.position.x = 10.0
    #goalPose.position.y = 11.0
    #goalPose.position.z = 0.000
    #goalPose.orientation.x = quaternion[0]
    #goalPose.orientation.y = quaternion[1]
    #goalPose.orientation.z = quaternion[2]
    #goalPose.orientation.w = quaternion[3]


    #print "////////////////////////////////////////////////////"
    #print "START = ",startPose
    #print "////////////////////////////////////////////////////"
    #print
    #print	
    #print "////////////////////////////////////////////////////"
    #print "ENDE = ",goalPose
    #print "////////////////////////////////////////////////////"

    rospy.wait_for_service('move_base_node/make_plan')
    
    #print "Plan available"

    try:
        make_plan_connection = rospy.ServiceProxy('move_base_node/NavfnROS/make_plan', GetPlan)
        #make_plan_connection = rospy.ServiceProxy('move_base_node/make_plan', GetPlan)
	start = PoseStamped()
	goal = PoseStamped()

	start.header.stamp  = rospy.get_rostime()
	goal.header.stamp  = rospy.get_rostime()

	start.header.frame_id  = '/map'
	goal.header.frame_id  = '/map'

	start.pose = startPose
	goal.pose = goalPose

        response = make_plan_connection(start,goal,tolerance)
    
    	#print
    	#print	
    	#print "////////////////////////////////////////////////////"
    	#print "////////////////////////////////////////////////////"


        distance = 0
        currentPosition = (start.pose.position.x, start.pose.position.y)
        nextPosition = (0,0)

	x_vector = []
	y_vector = []
    
        for pose_on_Path in response.plan.poses:
            
            nextPosition = (pose_on_Path.pose.position.x, pose_on_Path.pose.position.y)

	    x_vector.append(currentPosition[0])
	    y_vector.append(currentPosition[1])

            distance = distance + np.sqrt((currentPosition[0] - nextPosition[0])**2 + (currentPosition[1] - nextPosition[1])**2)

            currentPosition = nextPosition
	
	#print distance
	#pl.figure()
	#pl.plot(x_vector,y_vector)
	#pl.axis((5,25,5,25))
	#pl.show()

        return distance

    except rospy.ServiceException, e:
        print "Service call failed: %s" %e
	



def computeOrientation(start, goal):
    
    global tolerance
    
    rospy.wait_for_service('make_plan')
    
    try:
        make_plan_connection = rospy.ServiceProxy('make_plan', makePlan)
        path = make_plan_connection(start,goal,tolerance)
        
        deltaX = start.pose.pose.position.x - path[0].pose.pose.position.x
        deltaY = start.pose.pose.position.y - path[0].pose.pose.position.y

        yaw = atan2(deltaY,deltaX)
        
        return yaw
    
    except rospy.ServiceException, e:
        print "Service call failed: %s" %e



    
def computeOptimalPath(initialPose):

    rospy.init_node('PathPlanner', anonymous=True)    

    unorderedWaypoints = []
    orderedWaypoints = []
    

    
    # Corner 1/1
    waypoint1 = Pose()
    quaternion1 = quaternion_from_euler(0, 0, -1.57)

    waypoint1.position.x = 10.4
    waypoint1.position.y = 8.0
    waypoint1.position.z = 0.000
    waypoint1.orientation.x = quaternion1[0]    #0.000
    waypoint1.orientation.y = quaternion1[1]	#0.000
    waypoint1.orientation.z = quaternion1[2]	#-0.586277589703
    waypoint1.orientation.w = quaternion1[3]	#0.81011023189

    unorderedWaypoints.append(waypoint1)

    # Corner 1/2
    #waypoint2 = Pose()

    #waypoint2.position.x = 10.4
    #waypoint2.position.y = 6.74
    #waypoint2.position.z = 0.000
    #waypoint2.orientation.x = 0.000
    #waypoint2.orientation.y = 0.000
    #waypoint2.orientation.z = -0.37746662823
    #waypoint2.orientation.w =0.81011023189
    
    #unorderedWaypoints.append(waypoint2)

    
    # Corner 1/3
    waypoint3 = Pose()
    quaternion3 = quaternion_from_euler(0, 0, 0)

    waypoint3.position.x = 12.7
    waypoint3.position.y = 6.3
    waypoint3.position.z = 0.00
    waypoint3.orientation.x = quaternion3[0]	#0.000
    waypoint3.orientation.y = quaternion3[1]	#0.000
    waypoint3.orientation.z = quaternion3[2]	#-0.0969236885705
    waypoint3.orientation.w = quaternion3[3]	#0.81011023189
    
    unorderedWaypoints.append(waypoint3)
    
    # Corner 2/1
    waypoint4 = Pose()
    quaternion4 = quaternion_from_euler(0, 0, 0)

    waypoint4.position.x = 21.4
    waypoint4.position.y = 5.9
    waypoint4.position.z = 0.000
    waypoint4.orientation.x = quaternion4[0]	#0.000
    waypoint4.orientation.y = quaternion4[1]	#0.000
    waypoint4.orientation.z = quaternion4[2]	#0.0997332827304
    waypoint4.orientation.w = quaternion4[3]	#0.81011023189

    unorderedWaypoints.append(waypoint4)

    # Corner 2/2
    #waypoint5 = Pose()
    #waypoint5.position.x = 23.48
    #waypoint5.position.y = 6.56
    #waypoint5.position.z = 0.000
    #waypoint5.orientation.x = 0.000
    #waypoint5.orientation.y = 0.000
    #waypoint5.orientation.z = 0.687557328387
    #waypoint5.orientation.w = 0.81011023189

    #norderedWaypoints.append(waypoint5)

    # Corner 2/3
    waypoint6 = Pose()
    quaternion6= quaternion_from_euler(0, 0, 1.57)

    waypoint6.position.x = 23.37
    waypoint6.position.y = 7.55
    waypoint6.position.z = 0.000
    waypoint6.orientation.x = quaternion6[0]	#0.000
    waypoint6.orientation.y = quaternion6[1]	#0.000
    waypoint6.orientation.z = quaternion6[2]	#0.679364543684
    waypoint6.orientation.w = quaternion6[3]	#0.81011023189

    unorderedWaypoints.append(waypoint6)

    # Corner 3/1
    waypoint7 = Pose()
    quaternion7= quaternion_from_euler(0, 0, 1.57)

    waypoint7.position.x = 23.8
    waypoint7.position.y = 18
    waypoint7.position.z = 0.00
    waypoint7.orientation.x = quaternion7[0]	#0.000
    waypoint7.orientation.y = quaternion7[1]	#0.000
    waypoint7.orientation.z = quaternion7[2]	#0.803224655087
    waypoint7.orientation.w = quaternion7[3]	#0.81011023189

    unorderedWaypoints.append(waypoint7)

    # Corner 3/2
    #waypoint8 = Pose()
    #waypoint8.position.x = 23.46
    #waypoint8.position.y = 18.87
    #waypoint8.position.z = 0.000
    #waypoint8.orientation.x = 0.000
    #waypoint8.orientation.y = 0.000
    #waypoint8.orientation.z = 0.968665283717
    #waypoint8.orientation.w = 0.81011023189

    #unorderedWaypoints.append(waypoint8)
    
    # Corner 3/3
    waypoint9 = Pose()
    quaternion9= quaternion_from_euler(0, 0, -3.14)

    waypoint9.position.x = 22.2
    waypoint9.position.y = 19.1
    waypoint9.position.z = 0.000
    waypoint9.orientation.x = quaternion9[0]	#0.000
    waypoint9.orientation.y = quaternion9[1]	#0.000
    waypoint9.orientation.z = quaternion9[2]	#0.999914720206
    waypoint9.orientation.w = quaternion9[3]	#0.81011023189
    
    unorderedWaypoints.append(waypoint9)
    
    # Corner 4/1
    waypoint10 = Pose()
    quaternion10 = quaternion_from_euler(0, 0, -3.14)

    waypoint10.position.x = 12.8
    waypoint10.position.y = 19.6
    waypoint10.position.z = 0.000
    waypoint10.orientation.x = quaternion10[0]	#0.000
    waypoint10.orientation.y = quaternion10[1]	#0.000
    waypoint10.orientation.z = quaternion10[2]	#-0.997499162385
    waypoint10.orientation.w = quaternion10[3]	#0.81011023189

    unorderedWaypoints.append(waypoint10)
    
    # Corner 4/2
    #waypoint11 = Pose()
    #waypoint11.position.x = 11.36
    #waypoint11.position.y = 19.63
    #waypoint11.position.z = 0.000
    #waypoint11.orientation.x = 0.00
    #waypoint11.orientation.y = 0.000
    #waypoint11.orientation.z = -0.87778145924
    #waypoint11.orientation.w = 0.81011023189

    #unorderedWaypoints.append(waypoint11)

    # Corner 4/3
    waypoint12 = Pose()
    quaternion12 = quaternion_from_euler(0, 0, -1.57)

    waypoint12.position.x = 11.1
    waypoint12.position.y = 17.8
    waypoint12.position.z = 0.000;
    waypoint12.orientation.x = quaternion12[0]	#0.000
    waypoint12.orientation.y = quaternion12[1]	#0.000
    waypoint12.orientation.z = quaternion12[2]	#-0.715423519161
    waypoint12.orientation.w = quaternion12[3]	#0.81011023189
    
    unorderedWaypoints.append(waypoint12)

    currentPose = initialPose
    
    while len(unorderedWaypoints) != 0:
    
	    minimalDistance     = 9999
	    closestPose         = Pose()
	    closestPose_Index 	= 9999


	    #print
	    #print
	    #print 'Current Pose (',currentPose.position.x,', ', currentPose.position.y, ') '

	    for index in range(len(unorderedWaypoints)):

	    	pose = unorderedWaypoints[index]
	    	distance = computePathLength(currentPose,pose)

		#print 'Potential Next Pose (',pose.position.x,', ', pose.position.y, ') Distance = ', distance

		Currenteuler = euler_from_quaternion((currentPose.orientation.x,currentPose.orientation.y,currentPose.orientation.z,currentPose.orientation.w ))
		Nexteuler = euler_from_quaternion((pose.orientation.x,pose.orientation.y,pose.orientation.z,pose.orientation.w ))	
		
		diffAngle = abs(Currenteuler[2] - Nexteuler[2])
		if (diffAngle > 3.14):
			diffAngle = diffAngle - 6.28

		if(distance < minimalDistance and abs(diffAngle) < 2):
			minimalDistance = distance
	 		closestPose = pose
			closestPose_Index = index


	    #print
	    #print 'Potential Next Pose (',closestPose.position.x,', ', closestPose.position.y, ') Distance = ', distance
	    #print 
	    #print 

	    currentPose = closestPose

	    orderedWaypoints.append(closestPose)
	    unorderedWaypoints.pop(closestPose_Index)

    #print
    #print
    #print
    #print "//////////////////////////////////////////////////////"
    #print orderedWaypoints

    # Adapt the orientation of each Waypoint to the previous Waypoint
    #for index in range(len(orderedWaypoints) - 1):

    #       ordererdWaypoints[i].pose.orientation.z = computeOrientation(orderedWaypoints[i], orderedWaypoints[i+1]):


    rospy.init_node('PathPlanner', anonymous=True)
    rate = rospy.Rate(1000) 					# 100hz
    pub = rospy.Publisher('goals', Path, queue_size=10, latch = True)
    
    global published
 	
    while not rospy.is_shutdown():

	    targetPath = Path()

	    for temp_waypoint in unorderedWaypoints:
		tempPose = PoseStamped()
		tempPose.header.stamp = rospy.get_rostime()
		tempPose.pose = temp_waypoint
		
	    	targetPath.poses.append(tempPose)
	
	    if(published == False):
		print targetPath
	    	pub.publish(targetPath)
		published = True


	
	    rate.sleep()




if __name__ == '__main__':
    	
	try:
    
        	initialPose = Pose()
    		initialQuaternion = quaternion_from_euler(0, 0, 0)

        	initialPose.position.x = 18.7
        	initialPose.position.y = 6.0
        	initialPose.position.z = 0.00
        	initialPose.orientation.x = initialQuaternion[0]	#0.000
        	initialPose.orientation.y = initialQuaternion[1]	#0.000
        	initialPose.orientation.z = initialQuaternion[2]	#-0.0969236885705
        	initialPose.orientation.w = initialQuaternion[3]	#0.995291815798

		published = False
        
        
        	computeOptimalPath(initialPose)
    
	except rospy.ROSInterruptException:
        	pass

