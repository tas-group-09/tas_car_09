#!/usr/bin/env python

import rospy
from geometry_msgs.msg import PoseStamped
from geometry_msgs.msg import Pose
from nav_msgs.msg import Path
from nav_msgs.srv   import GetPlan
 
from tf.transformations import euler_from_quaternion
from tf.transformations import quaternion_from_euler

import pylab as pl
import numpy as np
import math

global tolerance
global published


# This function asks the move base node for the path from the  startPose torwards the goalPose.
# The distance between both poses is computed from the received path.
def computePathLength(startPose, goalPose):

    global tolerance

    # Tolerance of the goal pose of the path plannend by move base.
    tolerance = 0.1

    # The Poses were used for Testing
    #roll = 0
    #pitch = 0
    #yaw = 1.57	
    #quaternion = quaternion_from_euler(roll, pitch, yaw)

    #startPose = Pose()
    #startPose.position.x = 10.0
    #startPose.position.y = 8.0
    #startPose.position.z = 0.000
    #startPose.orientation.x = quaternion[0]
    #startPose.orientation.y = quaternion[1]
    #startPose.orientation.z = quaternion[2]
    #startPose.orientation.w = quaternion[3]

    #goalPose = Pose()
    #goalPose.position.x = 10.0
    #goalPose.position.y = 11.0
    #goalPose.position.z = 0.000
    #goalPose.orientation.x = quaternion[0]
    #goalPose.orientation.y = quaternion[1]
    #goalPose.orientation.z = quaternion[2]
    #goalPose.orientation.w = quaternion[3]


    #print "////////////////////////////////////////////////////"
    #print "START = ",startPose
    #print "////////////////////////////////////////////////////"
    #print
    #print	
    #print "////////////////////////////////////////////////////"
    #print "ENDE = ",goalPose
    #print "////////////////////////////////////////////////////"


    # The function waits until the service becomes available.
    rospy.wait_for_service('move_base_node/NavfnROS/make_plan')
    
    try:
        # Initiating the connection to the make plan service from the move base node.
        make_plan_connection = rospy.ServiceProxy('move_base_node/NavfnROS/make_plan', GetPlan)

        start = PoseStamped()
        goal = PoseStamped()
        
        start.header.stamp  = rospy.get_rostime()
        goal.header.stamp  = rospy.get_rostime()
        
        start.header.frame_id  = '/map'
        goal.header.frame_id  = '/map'
        
        start.pose = startPose
        goal.pose = goalPose

        # Calculation of the path by move base
        response = make_plan_connection(start,goal,tolerance)
    
    	#print
    	#print	
    	#print "////////////////////////////////////////////////////"
    	#print "////////////////////////////////////////////////////"


        distance = 0
        currentPosition = (start.pose.position.x, start.pose.position.y)
        nextPosition = (0,0)

        x_vector = []
        y_vector = []
    
        # Calculation of the distance along the path.
        for pose_on_Path in response.plan.poses:
            
            nextPosition = (pose_on_Path.pose.position.x, pose_on_Path.pose.position.y)

            x_vector.append(currentPosition[0])
            y_vector.append(currentPosition[1])

            distance = distance + np.sqrt((currentPosition[0] - nextPosition[0])**2 + (currentPosition[1] - nextPosition[1])**2)

            currentPosition = nextPosition
	
	#print distance
	#pl.figure()
	#pl.plot(x_vector,y_vector)
	#pl.axis((5,25,5,25))
	#pl.show()

        return distance

    except rospy.ServiceException, e:
        print "Service call failed: %s" %e
	


# This function computes the orientation towards the next waypoint, to allow an clockwise and counterclockwise path around the floor.
# ATTENTION: This function has not been validated or tested.
def computeOrientation(start, goal):
    
    global tolerance
    
    rospy.wait_for_service('move_base_node/NavfnROS/make_plan')
    
    try:
        # Initiating the connection to the make plan service from the move base node.
        make_plan_connection = rospy.ServiceProxy('move_base_node/NavfnROS/make_plan', GetPlan)
        
        start = PoseStamped()
        goal = PoseStamped()
        
        start.header.stamp  = rospy.get_rostime()
        goal.header.stamp  = rospy.get_rostime()
        
        start.header.frame_id  = '/map'
        goal.header.frame_id  = '/map'
        
        start.pose = startPose
        goal.pose = goalPose
        
        # Calculation of the path by move base
        response = make_plan_connection(start,goal,tolerance)
        
        deltaX = start.pose.pose.position.x - path[0].pose.pose.position.x
        deltaY = start.pose.pose.position.y - path[0].pose.pose.position.y

        yaw = atan2(deltaY,deltaX)
        
        return yaw
    
    except rospy.ServiceException, e:
        print "Service call failed: %s" %e



# This function computes the optimal path from any given location around the LSR floor. Currently only paths in the counterclockwise direction can be computed
def computeOptimalPath(initialPose):

    rospy.init_node('PathPlanner', anonymous=True)    

    unorderedWaypoints = []
    orderedWaypoints = []
    
    # The 8 distributed Waypoints around the lsr floor.
    
    # Corner 1/1
    waypoint1 = Pose()
    quaternion1 = quaternion_from_euler(0, 0, -1.57)

    waypoint1.position.x = 10.4
    waypoint1.position.y = 8.0
    waypoint1.position.z = 0.000
    waypoint1.orientation.x = quaternion1[0]    #0.000
    waypoint1.orientation.y = quaternion1[1]	#0.000
    waypoint1.orientation.z = quaternion1[2]	#-0.586277589703
    waypoint1.orientation.w = quaternion1[3]	#0.81011023189

    unorderedWaypoints.append(waypoint1)

    # Corner 1/2
    #waypoint2 = Pose()

    #waypoint2.position.x = 10.4
    #waypoint2.position.y = 6.74
    #waypoint2.position.z = 0.000
    #waypoint2.orientation.x = 0.000
    #waypoint2.orientation.y = 0.000
    #waypoint2.orientation.z = -0.37746662823
    #waypoint2.orientation.w =0.81011023189
    
    #unorderedWaypoints.append(waypoint2)

    
    # Corner 1/3
    waypoint3 = Pose()
    quaternion3 = quaternion_from_euler(0, 0, 0)

    waypoint3.position.x = 12.7
    waypoint3.position.y = 6.3
    waypoint3.position.z = 0.00
    waypoint3.orientation.x = quaternion3[0]	#0.000
    waypoint3.orientation.y = quaternion3[1]	#0.000
    waypoint3.orientation.z = quaternion3[2]	#-0.0969236885705
    waypoint3.orientation.w = quaternion3[3]	#0.81011023189
    
    #unorderedWaypoints.append(waypoint3)
    
    # Corner 2/1
    waypoint4 = Pose()
    quaternion4 = quaternion_from_euler(0, 0, 0)

    waypoint4.position.x = 23.1
    waypoint4.position.y = 5.85
    waypoint4.position.z = 0.000
    waypoint4.orientation.x = quaternion4[0]	#0.000
    waypoint4.orientation.y = quaternion4[1]	#0.000
    waypoint4.orientation.z = quaternion4[2]	#0.0997332827304
    waypoint4.orientation.w = quaternion4[3]	#0.81011023189

    unorderedWaypoints.append(waypoint4)

    # Corner 2/2
    #waypoint5 = Pose()
    #waypoint5.position.x = 23.48
    #waypoint5.position.y = 6.56
    #waypoint5.position.z = 0.000
    #waypoint5.orientation.x = 0.000
    #waypoint5.orientation.y = 0.000
    #waypoint5.orientation.z = 0.687557328387
    #waypoint5.orientation.w = 0.81011023189

    #norderedWaypoints.append(waypoint5)

    # Corner 2/3
    waypoint6 = Pose()
    quaternion6= quaternion_from_euler(0, 0, 1.57)

    waypoint6.position.x = 23.37
    waypoint6.position.y = 9.6
    waypoint6.position.z = 0.000
    waypoint6.orientation.x = quaternion6[0]	#0.000
    waypoint6.orientation.y = quaternion6[1]	#0.000
    waypoint6.orientation.z = quaternion6[2]	#0.679364543684
    waypoint6.orientation.w = quaternion6[3]	#0.81011023189

    unorderedWaypoints.append(waypoint6)

    # Corner 3/1
    waypoint7 = Pose()
    quaternion7= quaternion_from_euler(0, 0, 1.57)

    waypoint7.position.x = 23.8
    waypoint7.position.y = 18.0
    waypoint7.position.z = 0.00
    waypoint7.orientation.x = quaternion7[0]	#0.000
    waypoint7.orientation.y = quaternion7[1]	#0.000
    waypoint7.orientation.z = quaternion7[2]	#0.803224655087
    waypoint7.orientation.w = quaternion7[3]	#0.81011023189

    unorderedWaypoints.append(waypoint7)

    # Corner 3/2
    #waypoint8 = Pose()
    #waypoint8.position.x = 23.46
    #waypoint8.position.y = 18.87
    #waypoint8.position.z = 0.000
    #waypoint8.orientation.x = 0.000
    #waypoint8.orientation.y = 0.000
    #waypoint8.orientation.z = 0.968665283717
    #waypoint8.orientation.w = 0.81011023189

    #unorderedWaypoints.append(waypoint8)
    
    # Corner 3/3
    waypoint9 = Pose()
    quaternion9= quaternion_from_euler(0, 0, -3.14)

    waypoint9.position.x = 22.2
    waypoint9.position.y = 19.1
    waypoint9.position.z = 0.000
    waypoint9.orientation.x = quaternion9[0]	#0.000
    waypoint9.orientation.y = quaternion9[1]	#0.000
    waypoint9.orientation.z = quaternion9[2]	#0.999914720206
    waypoint9.orientation.w = quaternion9[3]	#0.81011023189
    
    unorderedWaypoints.append(waypoint9)
    
    # Corner 4/1
    waypoint10 = Pose()
    quaternion10 = quaternion_from_euler(0, 0, -3.14)

    waypoint10.position.x = 12.8
    waypoint10.position.y = 19.6
    waypoint10.position.z = 0.000
    waypoint10.orientation.x = quaternion10[0]	#0.000
    waypoint10.orientation.y = quaternion10[1]	#0.000
    waypoint10.orientation.z = quaternion10[2]	#-0.997499162385
    waypoint10.orientation.w = quaternion10[3]	#0.81011023189

    unorderedWaypoints.append(waypoint10)
    
    # Corner 4/2
    #waypoint11 = Pose()
    #waypoint11.position.x = 11.36
    #waypoint11.position.y = 19.63
    #waypoint11.position.z = 0.000
    #waypoint11.orientation.x = 0.00
    #waypoint11.orientation.y = 0.000
    #waypoint11.orientation.z = -0.87778145924
    #waypoint11.orientation.w = 0.81011023189

    #unorderedWaypoints.append(waypoint11)

    # Corner 4/3
    waypoint12 = Pose()
    quaternion12 = quaternion_from_euler(0, 0, -1.57)

    waypoint12.position.x = 11.1
    waypoint12.position.y = 17.8
    waypoint12.position.z = 0.000;
    waypoint12.orientation.x = quaternion12[0]	#0.000
    waypoint12.orientation.y = quaternion12[1]	#0.000
    waypoint12.orientation.z = quaternion12[2]	#-0.715423519161
    waypoint12.orientation.w = quaternion12[3]	#0.81011023189
    
    unorderedWaypoints.append(waypoint12)

    currentPose = initialPose
    
    # Repeat this step for every waypoint in the unordered Waypoint list.
    for waypoint_index in  range(len(unorderedWaypoints)):
        
        minimalDistance     = 9999
        closestPose         = Pose()
        closestPose_Index 	= 9999


        #print
        #print
        #print 'Current Pose (',currentPose.position.x,', ', currentPose.position.y, ') '

        # Computation of the distance between the current
        for index in range(len(unorderedWaypoints)):

            pose = unorderedWaypoints[index]
            distance = computePathLength(currentPose,pose)

            #print 'Potential Next Pose (',pose.position.x,', ', pose.position.y, ') Distance = ', distance

            Currenteuler = euler_from_quaternion((currentPose.orientation.x,currentPose.orientation.y,currentPose.orientation.z,currentPose.orientation.w ))
            Nexteuler = euler_from_quaternion((pose.orientation.x,pose.orientation.y,pose.orientation.z,pose.orientation.w ))	
            
            diffAngle = abs(Currenteuler[2] - Nexteuler[2])
            if (diffAngle > 3.14):
                diffAngle = diffAngle - 6.28

            currentPose_vector_x = np.cos(Currenteuler[2]) * 1.0
            currentPose_vector_y = np.sin(Currenteuler[2]) * 1.0

            currentPose_length = currentPose_vector_x**2 + currentPose_vector_y**2

            vector_x = pose.position.x - currentPose.position.x
            vector_y = pose.position.y - currentPose.position.y

            resulting_vector_x = currentPose_vector_x + vector_x
            resulting_vector_y = currentPose_vector_y + vector_y

            resulting_vector_length = resulting_vector_x**2 + resulting_vector_y**2

            # Choosing the waypoint as next waypoint which distance is smallest while having the same orientation as the starting point.
            if(distance < minimalDistance and abs(diffAngle) < 2 and resulting_vector_length > currentPose_length):
                minimalDistance = distance
                closestPose = pose
                closestPose_Index = index


            #print
            #print 'Potential Next Pose (',closestPose.position.x,', ', closestPose.position.y, ') Distance = ', distance
            #print 
            #print 

            currentPose = closestPose

            orderedWaypoints.append(closestPose)
            #unorderedWaypoints.pop(closestPose_Index)


        # Adapt the orientation of each Waypoint to the previous Waypoint -> Has not been tested.
        #for index in range(len(orderedWaypoints) - 1):

        #       ordererdWaypoints[i].pose.orientation.z = computeOrientation(orderedWaypoints[i], orderedWaypoints[i+1]):


    rospy.init_node('PathPlanner', anonymous=True)
    rate = rospy.Rate(1000) 					# 100hz
    pub = rospy.Publisher('goals', Path, queue_size=10, latch = True)
    
    global published
 	
    while not rospy.is_shutdown():

	    targetPath = Path()

        # Writing the ordered Waypoints into the path array.
	    for temp_waypoint in unorderedWaypoints:
		tempPose = PoseStamped()
		tempPose.header.stamp = rospy.get_rostime()
		tempPose.pose = temp_waypoint
		
        	targetPath.poses.append(tempPose)
	
	    if(published == False):
            	print targetPath
	    	pub.publish(targetPath)
            published = True


	
	    rate.sleep()




if __name__ == '__main__':
    	
	try:
    
        	initialPose = Pose()
    		initialQuaternion = quaternion_from_euler(0, 0, -180 /180 * math.pi)

        	initialPose.position.x = 18.9  #11.7
        	initialPose.position.y = 6.11  #12.2
        	initialPose.position.z = 0.00
        	initialPose.orientation.x = initialQuaternion[0]	#0.000
        	initialPose.orientation.y = initialQuaternion[1]	#0.000
        	initialPose.orientation.z = initialQuaternion[2]	#-0.0969236885705
        	initialPose.orientation.w = initialQuaternion[3]	#0.995291815798

		published = False
        
        
        	computeOptimalPath(initialPose)
    
	except rospy.ROSInterruptException:
        	pass

